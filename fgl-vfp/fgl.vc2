*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.21" SourceFile="fgl.vcx" CPID="1251" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS fgl3drect AS fglmath3d OF "fgl.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: getsize
	*</DefinedPropArrayMethod>

	*<PropValue>
		Name = "fgl3drect"
	*</PropValue>
	
	PROCEDURE copy
		LPARAMETERS toSrc
		
		This.min.copy(m.toSrc.min)
		This.max.copy(m.toSrc.max)
		
	ENDPROC

	PROCEDURE getsize
		LPARAMETERS tnX, tnY, tnZ
		
		m.tnX = This.max.x - This.min.x
		m.tnY = This.max.y - This.min.y
		m.tnZ = This.max.z - This.min.z
		
	ENDPROC

	PROCEDURE Init
		This.NewObject("min", "fgl.fglVECTOR")
		This.NewObject("max", "fgl.fglVECTOR")
		
	ENDPROC

ENDDEFINE

DEFINE CLASS fglbbox AS fglbindmember OF "fgl.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: isvisible_access
		*m: isvisible_assign
		*m: meshcolor_access
		*m: meshcolor_assign
		*m: meshfill_access
		*m: meshfill_assign
		*m: meshlighting_access
		*m: meshlighting_assign
		*m: meshlinewidth_access
		*m: meshlinewidth_assign
		*m: meshtype_access
		*m: meshtype_assign
		*p: isvisible
		*p: meshcolor
		*p: meshfill
		*p: meshlighting
		*p: meshlinewidth
		*p: meshtype
	*</DefinedPropArrayMethod>

	*<PropValue>
		isvisible = .F.
		meshcolor = 0
		meshfill = 0
		meshlighting = 0
		meshlinewidth = 0
		meshtype = 0
		Name = "fglbbox"
	*</PropValue>
	
	HIDDEN PROCEDURE isvisible_access
		RETURN This.fgl_call(113)
		
	ENDPROC

	HIDDEN PROCEDURE isvisible_assign
		LPARAMETERS vNewVal
		
		This.fgl_call(113, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE meshcolor_access
		RETURN This.fgl_call(114)
		
	ENDPROC

	HIDDEN PROCEDURE meshcolor_assign
		LPARAMETERS vNewVal
		
		This.fgl_call(114, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE meshfill_access
		RETURN This.fgl_call(115)
		
	ENDPROC

	HIDDEN PROCEDURE meshfill_assign
		LPARAMETERS vNewVal
		
		This.fgl_call(115, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE meshlighting_access
		RETURN This.fgl_call(118)
		
	ENDPROC

	HIDDEN PROCEDURE meshlighting_assign
		LPARAMETERS vNewVal
		This.fgl_call(118, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE meshlinewidth_access
		RETURN This.fgl_call(116)
		
	ENDPROC

	HIDDEN PROCEDURE meshlinewidth_assign
		LPARAMETERS vNewVal
		
		This.fgl_call(116, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE meshtype_access
		RETURN This.fgl_call(117)
		
	ENDPROC

	HIDDEN PROCEDURE meshtype_assign
		LPARAMETERS vNewVal
		This.fgl_call(117, m.vNewVal)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS fglbind AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: copy
		*m: duplicatemode_access
		*m: duplicatemode_assign
		*m: fgl_call
		*m: fgl_class_access
		*m: fgl_class_assign
		*m: fgl_create
		*m: fgl_duplicate
		*m: fgl_name_access
		*m: fgl_name_assign
		*m: fgl_release
		*m: getprop
		*m: hfgl_access
		*m: hscene_access
		*m: hscene_assign
		*m: setprop
		*p: duplicatemode
		*p: fgl_class
		*p: fgl_member		&& set if object is a member of parent class, for example fglCollection aChilds in fglNode class.
		*p: fgl_name
		*p: hfgl
		*p: hfglparent
		*p: hscene
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	HIDDEN _memberdata
	*<PropValue>
		duplicatemode = 0
		fgl_class = ("bind")
		fgl_member = ("")
		fgl_name = ("")
		Height = 32
		hfgl = 0
		hfglparent = 0
		hscene = 0
		Name = "fglbind"
		Width = 35
		_memberdata = <VFPData>
			<memberdata name="hfgl" type="property" display="hFGL"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE copy
		LPARAMETERS thBind, tnShare
		
		RETURN This.fgl_call(4, m.thBind, m.tnShare)
		
	ENDPROC

	HIDDEN PROCEDURE duplicatemode_access
		RETURN This.fgl_call(160)
		
	ENDPROC

	HIDDEN PROCEDURE duplicatemode_assign
		LPARAMETERS vNewVal
		RETURN This.fgl_call(160, m.vNewVal)
		
	ENDPROC

	PROCEDURE fgl_call
		LPARAMETERS tnName, tvParam1, tvParam2, tvParam3, tvParam4, tvParam5, tvParam6, tvParam7, tvParam8
		
		RETURN fgl_call(This.hFGL, m.tnName, PCOUNT(), m.tvParam1, m.tvParam2, m.tvParam3, m.tvParam4, m.tvParam5, m.tvParam6, m.tvParam7, m.tvParam8)
		
	ENDPROC

	HIDDEN PROCEDURE fgl_class_access
		RETURN EVL(This.fgl_call(3), This.fgl_class)
		
	ENDPROC

	HIDDEN PROCEDURE fgl_class_assign
		LPARAMETERS vNewVal
		ERROR 1533
	ENDPROC

	PROCEDURE fgl_create
		LPARAMETERS thScene, tvParam1, tvParam2, tvParam3, tvParam4, tvParam5, tvParam6, tvParam7, tvParam8
		
		This.hFGL = 0
		This.hFGL = fgl_newobject(EVL(This.fgl_class,""),EVL(m.thScene,0),m.tvParam1, m.tvParam2, m.tvParam3, m.tvParam4, m.tvParam5, m.tvParam6, m.tvParam7, m.tvParam8)
		
		RETURN This.hFGL
		
	ENDPROC

	PROCEDURE fgl_duplicate
		LPARAMETERS thBind, pnDuplicate, tnShare
		
		RETURN This.fgl_call(159, m.thBind, m.pnDuplicate, m.tnShare)
		
	ENDPROC

	HIDDEN PROCEDURE fgl_name_access
		RETURN This.fgl_call(2)
		
	ENDPROC

	HIDDEN PROCEDURE fgl_name_assign
		LPARAMETERS vNewVal
		This.fgl_call(2, m.vNewVal)
	ENDPROC

	PROCEDURE fgl_release
		LPARAMETERS thFGL
		
		fgl_removeobject(EVL(m.thFGL,This.hFGL))
		
	ENDPROC

	PROCEDURE getprop
		LPARAMETERS tcName
		
		RETURN This.fgl_call(6, m.tcName)
		
	ENDPROC

	HIDDEN PROCEDURE hfgl_access
		IF EMPTY(This.fgl_member)=.F.
			IF This.hFGLParent <> EVL(This.Parent.hFGL,0)
				This.hFGLParent = EVL(This.Parent.hFGL,0)
				This.hFGL = This.Parent.fgl_call(This.fgl_member)
			ENDIF
		ENDIF
		
		RETURN EVL(This.hFGL,0)
		
	ENDPROC

	HIDDEN PROCEDURE hscene_access
		RETURN This.fgl_call(1)
		
	ENDPROC

	HIDDEN PROCEDURE hscene_assign
		LPARAMETERS vNewVal
		ERROR 1533
	ENDPROC

	PROCEDURE Init
		
		
	ENDPROC

	PROCEDURE setprop
		LPARAMETERS tcName, tvNewVal
		
		RETURN This.fgl_call(5, m.tcName, m.tvNewVal)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS fglbindmember AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: copy
		*m: fgl_call
		*m: hfgl_access
		*p: hfgl
	*</DefinedPropArrayMethod>

	*<PropValue>
		Height = 32
		hfgl = 0
		Name = "fglbindmember"
		Width = 32
	*</PropValue>
	
	PROCEDURE copy
		LPARAMETERS toSrc
	ENDPROC

	PROCEDURE fgl_call
		LPARAMETERS tnName, tvParam1, tvParam2, tvParam3, tvParam4, tvParam5, tvParam6, tvParam7, tvParam8
		
		RETURN fgl_call(This.hFGL, m.tnName, PCOUNT(), m.tvParam1, m.tvParam2, m.tvParam3, m.tvParam4, m.tvParam5, m.tvParam6, m.tvParam7, m.tvParam8)
		
	ENDPROC

	HIDDEN PROCEDURE hfgl_access
		RETURN This.Parent.hFGL
		
	ENDPROC

ENDDEFINE

DEFINE CLASS fglcam AS fglnode OF "fgl.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: fov_access
		*m: fov_assign
		*m: zfar_access
		*m: zfar_assign
		*m: znear_access
		*m: znear_assign
		*p: fov
		*p: zfar
		*p: znear
	*</DefinedPropArrayMethod>

	HIDDEN _memberdata
	*<PropValue>
		fgl_class = ("cam")
		fov = 0
		Height = 22
		Name = "fglcam"
		Picture = ..\
		Width = 24
		zfar = 0
		znear = 0
	*</PropValue>
	
	HIDDEN PROCEDURE fov_access
		RETURN This.fgl_call(23)
		
	ENDPROC

	HIDDEN PROCEDURE fov_assign
		LPARAMETERS vNewVal
		This.fgl_call(23, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE zfar_access
		RETURN This.fgl_call(163)
		
	ENDPROC

	HIDDEN PROCEDURE zfar_assign
		LPARAMETERS vNewVal
		This.fgl_call(163, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE znear_access
		RETURN This.fgl_call(162)
		
	ENDPROC

	HIDDEN PROCEDURE znear_assign
		LPARAMETERS vNewVal
		This.fgl_call(162, m.vNewVal)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS fglcollection AS fglbind OF "fgl.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: add		&& Adds a new member to a Collection.
		*m: clear		&& Clears the contents of a ComboBox or ListBox control.
		*m: del
		*m: find
		*m: get
		*m: reserve
		*m: size
	*</DefinedPropArrayMethod>

	HIDDEN _memberdata
	*<PropValue>
		fgl_class = ("collection")
		Name = "fglcollection"
	*</PropValue>
	
	PROCEDURE add		&& Adds a new member to a Collection.
		LPARAMETERS thItem
		
		RETURN This.fgl_call(18, m.thItem)
		
	ENDPROC

	PROCEDURE clear		&& Clears the contents of a ComboBox or ListBox control.
		RETURN This.fgl_call(21)
	ENDPROC

	PROCEDURE del
		LPARAMETERS thItem
		
		RETURN This.fgl_call(19, m.thItem)
		
	ENDPROC

	PROCEDURE find
		LPARAMETERS thItem
		
		RETURN This.fgl_call(11, m.thItem)
		
	ENDPROC

	PROCEDURE get
		LPARAMETERS tnIndex
		
		RETURN This.fgl_call(22, m.tnIndex)
		
	ENDPROC

	PROCEDURE reserve
		LPARAMETERS tnSize
		
		RETURN This.fgl_call(20, m.tnSize)
		
	ENDPROC

	PROCEDURE size
		RETURN This.fgl_call(9)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS fglcollideinfo AS fglbind OF "fgl.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: empty
		*m: find
		*m: getdist
		*m: getnode1
		*m: getnode2
		*m: hnode1_access
		*m: hnode2_access
		*m: nmindist_access
		*m: size
		*p: hnode1
		*p: hnode2
		*p: nmindist
	*</DefinedPropArrayMethod>

	HIDDEN _memberdata
	*<PropValue>
		fgl_class = ("collideinfo")
		hnode1 = 0
		hnode2 = 0
		Name = "fglcollideinfo"
		nmindist = 0
	*</PropValue>
	
	PROCEDURE empty
		RETURN This.fgl_call(10)
	ENDPROC

	PROCEDURE find
		LPARAMETERS thNode
		RETURN This.fgl_call(11, m.thNode)
		
	ENDPROC

	PROCEDURE getdist
		LPARAMETERS tnIndex
		RETURN This.fgl_call(17, m.tnIndex)
		
	ENDPROC

	PROCEDURE getnode1
		LPARAMETERS tnIndex
		RETURN This.fgl_call(15, m.tnIndex)
		
	ENDPROC

	PROCEDURE getnode2
		LPARAMETERS tnIndex
		RETURN This.fgl_call(16, m.tnIndex)
		
	ENDPROC

	HIDDEN PROCEDURE hnode1_access
		RETURN This.fgl_call(13)
		
	ENDPROC

	HIDDEN PROCEDURE hnode2_access
		RETURN This.fgl_call(14)
		
	ENDPROC

	HIDDEN PROCEDURE nmindist_access
		RETURN This.fgl_call(12)
		
	ENDPROC

	PROCEDURE size
		RETURN This.fgl_call(9)
	ENDPROC

ENDDEFINE

DEFINE CLASS fglcollider AS fglbind OF "fgl.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: testnode
	*</DefinedPropArrayMethod>

	HIDDEN _memberdata
	*<PropValue>
		fgl_class = ("collider")
		Name = "fglcollider"
	*</PropValue>
	
	PROCEDURE Init
		DODEFAULT()
		This.NewObject("aNodes", "fgl.fglCollection")
		This.aNodes.fgl_member = 7
		
	ENDPROC

	PROCEDURE testnode
		LPARAMETERS thNode, thCollideInfo
		
		RETURN This.fgl_call(8, m.thNode, m.thCollideInfo)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS fgljoint AS fglnode OF "fgl.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	HIDDEN _memberdata
	*<PropValue>
		fgl_class = ("joint")
		Name = "fgljoint"
	*</PropValue>

ENDDEFINE

DEFINE CLASS fgllight AS fglnode OF "fgl.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: ambient_access
		*m: ambient_assign
		*m: atten_access
		*m: atten_assign
		*m: diffuse_access
		*m: diffuse_assign
		*m: isspot_access
		*m: isspot_assign
		*m: radius_access
		*m: radius_assign
		*m: specular_access
		*m: specular_assign
		*m: spotcutoff_access
		*m: spotcutoff_assign
		*m: spotexp_access
		*m: spotexp_assign
		*p: ambient		&& ambient color in RGBA
		*p: atten
		*p: diffuse		&& Diffuse color in RGBA
		*p: isspot
		*p: radius
		*p: specular		&& Specular color in RGBA
		*p: spotcutoff
		*p: spotexp
	*</DefinedPropArrayMethod>

	HIDDEN _memberdata
	*<PropValue>
		ambient = 0
		atten = 0.0
		diffuse = 0
		fgl_class = ("light")
		isspot = .F.
		Name = "fgllight"
		radius = 0.0
		specular = 0
		spotcutoff = 0.0
		spotexp = 0.0
	*</PropValue>
	
	HIDDEN PROCEDURE ambient_access
		RETURN This.fgl_call(24)
		
	ENDPROC

	HIDDEN PROCEDURE ambient_assign
		LPARAMETERS vNewVal
		This.fgl_call(24, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE atten_access
		RETURN This.fgl_call(30)
		
	ENDPROC

	HIDDEN PROCEDURE atten_assign
		LPARAMETERS vNewVal
		This.fgl_call(30, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE diffuse_access
		RETURN This.fgl_call(25)
		
	ENDPROC

	HIDDEN PROCEDURE diffuse_assign
		LPARAMETERS vNewVal
		This.fgl_call(25, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE isspot_access
		RETURN This.fgl_call(27)
		
	ENDPROC

	HIDDEN PROCEDURE isspot_assign
		LPARAMETERS vNewVal
		This.fgl_call(27, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE radius_access
		RETURN This.fgl_call(31)
		
	ENDPROC

	HIDDEN PROCEDURE radius_assign
		LPARAMETERS vNewVal
		This.fgl_call(31, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE specular_access
		RETURN This.fgl_call(26)
		
	ENDPROC

	HIDDEN PROCEDURE specular_assign
		LPARAMETERS vNewVal
		This.fgl_call(26, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE spotcutoff_access
		RETURN This.fgl_call(28)
		
	ENDPROC

	HIDDEN PROCEDURE spotcutoff_assign
		LPARAMETERS vNewVal
		This.fgl_call(28, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE spotexp_access
		RETURN This.fgl_call(29)
		
	ENDPROC

	HIDDEN PROCEDURE spotexp_assign
		LPARAMETERS vNewVal
		This.fgl_call(29, m.vNewVal)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS fglmaterial AS fglbind OF "fgl.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: color_ambient_access
		*m: color_ambient_assign
		*m: color_diffuse_access
		*m: color_diffuse_assign
		*m: color_emission_access
		*m: color_emission_assign
		*m: color_specular_access
		*m: color_specular_assign
		*m: color_transparent_access
		*m: color_transparent_assign
		*m: htexture_access
		*m: htexture_assign
		*m: lighting_access
		*m: lighting_assign
		*m: opacity_access
		*m: opacity_assign
		*m: refracti_access
		*m: refracti_assign
		*m: shading_access
		*m: shading_assign
		*m: shininess_access
		*m: shininess_assign
		*m: shininess_strength_access
		*m: shininess_strength_assign
		*m: twosided_access
		*m: twosided_assign
		*m: wireframe_access
		*m: wireframe_assign
		*p: color_ambient
		*p: color_diffuse
		*p: color_emission
		*p: color_specular
		*p: color_transparent
		*p: htexture
		*p: lighting
		*p: opacity
		*p: refracti
		*p: shading
		*p: shininess
		*p: shininess_strength
		*p: twosided
		*p: wireframe
	*</DefinedPropArrayMethod>

	HIDDEN _memberdata
	*<PropValue>
		color_ambient = 0
		color_diffuse = 0
		color_emission = 0
		color_specular = 0
		color_transparent = 0
		fgl_class = ("material")
		htexture = 0
		lighting = .T.
		Name = "fglmaterial"
		opacity = 0
		refracti = 0
		shading = 0
		shininess = 0
		shininess_strength = 0
		twosided = 0
		wireframe = 0
	*</PropValue>
	
	HIDDEN PROCEDURE color_ambient_access
		RETURN This.fgl_call(43)
		
	ENDPROC

	HIDDEN PROCEDURE color_ambient_assign
		LPARAMETERS vNewVal
		This.fgl_call(43, m.vNewVal)
	ENDPROC

	HIDDEN PROCEDURE color_diffuse_access
		RETURN This.fgl_call(41)
		
	ENDPROC

	HIDDEN PROCEDURE color_diffuse_assign
		LPARAMETERS vNewVal
		This.fgl_call(41, m.vNewVal)
	ENDPROC

	HIDDEN PROCEDURE color_emission_access
		RETURN This.fgl_call(44)
	ENDPROC

	HIDDEN PROCEDURE color_emission_assign
		LPARAMETERS vNewVal
		This.fgl_call(44, m.vNewVal)
	ENDPROC

	HIDDEN PROCEDURE color_specular_access
		RETURN This.fgl_call(42)
		
	ENDPROC

	HIDDEN PROCEDURE color_specular_assign
		LPARAMETERS vNewVal
		This.fgl_call(42, m.vNewVal)
	ENDPROC

	HIDDEN PROCEDURE color_transparent_access
		RETURN This.fgl_call(45)
	ENDPROC

	HIDDEN PROCEDURE color_transparent_assign
		LPARAMETERS vNewVal
		This.fgl_call(45, m.vNewVal)
	ENDPROC

	HIDDEN PROCEDURE htexture_access
		RETURN This.fgl_call(55)
		
	ENDPROC

	HIDDEN PROCEDURE htexture_assign
		LPARAMETERS vNewVal
		This.fgl_call(55, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE lighting_access
		RETURN This.fgl_call(50)
		
	ENDPROC

	HIDDEN PROCEDURE lighting_assign
		LPARAMETERS vNewVal
		This.fgl_call(50, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE opacity_access
		RETURN This.fgl_call(46)
		
	ENDPROC

	HIDDEN PROCEDURE opacity_assign
		LPARAMETERS vNewVal
		This.fgl_call(46, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE refracti_access
		RETURN This.fgl_call(49)
	ENDPROC

	HIDDEN PROCEDURE refracti_assign
		LPARAMETERS vNewVal
		This.fgl_call(49, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE shading_access
		RETURN This.fgl_call(51)
		
	ENDPROC

	HIDDEN PROCEDURE shading_assign
		LPARAMETERS vNewVal
		This.fgl_call(51, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE shininess_access
		RETURN This.fgl_call(47)
	ENDPROC

	HIDDEN PROCEDURE shininess_assign
		LPARAMETERS vNewVal
		This.fgl_call(47, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE shininess_strength_access
		RETURN This.fgl_call(48)
	ENDPROC

	HIDDEN PROCEDURE shininess_strength_assign
		LPARAMETERS vNewVal
		This.fgl_call(48, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE twosided_access
		RETURN This.fgl_call(52)
	ENDPROC

	HIDDEN PROCEDURE twosided_assign
		LPARAMETERS vNewVal
		This.fgl_call(52, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE wireframe_access
		RETURN This.fgl_call(53)
	ENDPROC

	HIDDEN PROCEDURE wireframe_assign
		LPARAMETERS vNewVal
		This.fgl_call(53, m.vNewVal)
	ENDPROC

ENDDEFINE

DEFINE CLASS fglmath3d AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<PropValue>
		Name = "fglmath3d"
	*</PropValue>

ENDDEFINE

DEFINE CLASS fglmesh AS fglvisual OF "fgl.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: loaddatafromstring
		*m: transformbybones
	*</DefinedPropArrayMethod>

	HIDDEN _memberdata
	*<PropValue>
		fgl_class = ("mesh")
		Name = "fglmesh"
	*</PropValue>
	
	PROCEDURE loaddatafromstring
		LPARAMETERS tcData, tcFormat
		
		This.fgl_call(186, @m.tcData, EVL(m.tcFormat, "nff"))
		
	ENDPROC

	PROCEDURE transformbybones
		This.fgl_call(65)
	ENDPROC

ENDDEFINE

DEFINE CLASS fglmodel AS fglvisual OF "fgl.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: bindskel
		*m: buildlod
		*m: findjoint
		*m: getmaterials
		*m: getvisuals
		*m: hrootjoint_access
		*m: hrootjoint_assign
		*m: loaddata
		*m: transformbybones
		*p: hrootjoint
	*</DefinedPropArrayMethod>

	HIDDEN _memberdata
	*<PropValue>
		fgl_class = ("model")
		Height = 32
		hrootjoint = 0
		Name = "fglmodel"
		Picture = ..\
		Width = 32
	*</PropValue>
	
	PROCEDURE bindskel
		RETURN This.fgl_call(158)
	ENDPROC

	PROCEDURE buildlod
		LPARAMETERS tnViewRange, tnStep, tnSteps
		RETURN This.fgl_call(157, m.tnViewRange, m.tnStep, m.tnSteps)
	ENDPROC

	PROCEDURE findjoint
		LPARAMETERS tcName
		RETURN This.fgl_call(156, m.tcName)
		
	ENDPROC

	PROCEDURE getmaterials
		LPARAMETERS tcVisualName, tcMaterialName
		RETURN This.fgl_call(161, m.tcVisualName, m.tcMaterialName)
		
	ENDPROC

	PROCEDURE getvisuals
		LPARAMETERS tcVisualName, tcMaterialName
		RETURN This.fgl_call(132, m.tcVisualName, m.tcMaterialName)
		
	ENDPROC

	HIDDEN PROCEDURE hrootjoint_access
		RETURN This.fgl_call(155)
	ENDPROC

	HIDDEN PROCEDURE hrootjoint_assign
		LPARAMETERS vNewVal
		ERROR 1740
		
	ENDPROC

	PROCEDURE Init
		DODEFAULT()
		
		This.NewObject("aAnims", "fgl.fglCollection")
		This.aAnims.fgl_member = 154
		
	ENDPROC

	PROCEDURE loaddata
		LPARAMETERS tcPath
		
		RETURN This.fgl_call(152, m.tcPath)
		
	ENDPROC

	PROCEDURE transformbybones
		This.fgl_call(65)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS fglnode AS fglbind OF "fgl.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: buildtransform
		*m: calcbounds
		*m: correctboundsext
		*m: find
		*m: getbounds
		*m: getboundsext
		*m: getlookat
		*m: getlookatplane
		*m: getmaterials
		*m: getpos
		*m: getroteuler
		*m: getrotquat
		*m: getscale
		*m: gettrgconstraints
		*m: getvisuals
		*m: hparent_access
		*m: hparent_assign
		*m: isenabled_access
		*m: isenabled_assign
		*m: isvisible_access
		*m: isvisible_assign
		*m: lookat
		*m: moveby
		*m: movedir
		*m: moveto
		*m: rotateby
		*m: rotateto
		*m: scaleat
		*m: scaleby
		*m: scaleto
		*m: setboundsext
		*m: setrotquat
		*m: settrgconstraints
		*m: testinfrustum
		*p: hparent
		*p: isenabled
		*p: isvisible
	*</DefinedPropArrayMethod>

	HIDDEN _memberdata
	*<PropValue>
		fgl_class = ("node")
		hparent = 0
		isenabled = .T.
		isvisible = .T.
		Name = "fglnode"
		Picture = ..\
		_memberdata = <VFPData>
			<memberdata name="build" type="method" display="Build" favorites="True"/>
			<memberdata name="buildtransform" type="method" display="buildTransform" favorites="True"/>
			<memberdata name="moveby" type="method" display="moveBy" favorites="True"/>
			<memberdata name="px" type="property" display="px" favorites="True"/>
			<memberdata name="py" type="property" display="py" favorites="True"/>
			<memberdata name="pz" type="property" display="pz" favorites="True"/>
			<memberdata name="ra" type="property" display="ra" favorites="True"/>
			<memberdata name="rotateby" type="method" display="rotateBy" favorites="True"/>
			<memberdata name="rx" type="property" display="rx" favorites="True"/>
			<memberdata name="ry" type="property" display="ry" favorites="True"/>
			<memberdata name="rz" type="property" display="rz" favorites="True"/>
			<memberdata name="sx" type="property" display="sx" favorites="True"/>
			<memberdata name="sy" type="property" display="sy" favorites="True"/>
			<memberdata name="sz" type="property" display="sz" favorites="True"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE buildtransform
		This.fgl_call(108)
		
	ENDPROC

	PROCEDURE calcbounds
		RETURN This.fgl_call(109)
		
	ENDPROC

	PROCEDURE correctboundsext
		LPARAMETERS  m.toBMinOrBMinX, toBMaxOrBMiny, tnBMinz, tnBMaxx, tnBMaxy, tnBMaxz
		This.fgl_call(172, m.toBMinOrBMinX, m.toBMaxOrBMiny, m.tnBMinz, m.tnBMaxx, m.tnBMaxy, m.tnBMaxz)
		
	ENDPROC

	PROCEDURE find
		LPARAMETERS tcName
		RETURN This.fgl_call(11, m.tcName)
	ENDPROC

	PROCEDURE getbounds
		LPARAMETERS toBMin, toBMax, toSize, tlGlobal
		This.fgl_call(167, m.toBMin, m.toBMax, m.toSize, m.tlGlobal)
		
	ENDPROC

	PROCEDURE getboundsext
		LPARAMETERS toBMin, toBMax, toSize
		This.fgl_call(168, m.toBMin, m.toBMax, m.toSize)
		
	ENDPROC

	PROCEDURE getlookat
		LPARAMETERS toLookAt, tlGlobal
		This.fgl_call(184, m.toLookAt, m.tlGlobal)
		
	ENDPROC

	PROCEDURE getlookatplane
		LPARAMETERS toPlane, toPoint
		RETURN This.fgl_call(171, m.toPlane, m.toPoint)
		
	ENDPROC

	PROCEDURE getmaterials
		LPARAMETERS tcVisualName, tcMaterialName
		RETURN This.fgl_call(161, m.tcVisualName, m.tcMaterialName)
		
	ENDPROC

	PROCEDURE getpos
		LPARAMETERS toPos, tlGlobal
		This.fgl_call(164, m.toPos, m.tlGlobal)
		
	ENDPROC

	PROCEDURE getroteuler
		LPARAMETERS toAngles, tlGlobal
		This.fgl_call(133, m.toAngles, m.tlGlobal)
		
	ENDPROC

	PROCEDURE getrotquat
		LPARAMETERS toQuat, tlGlobal
		This.fgl_call(166, m.toQuat, m.tlGlobal)
		
	ENDPROC

	PROCEDURE getscale
		LPARAMETERS toScale, tlGlobal
		This.fgl_call(165, m.toScale, m.tlGlobal)
		
	ENDPROC

	PROCEDURE gettrgconstraints
		LPARAMETERS toRot, toPos, toScale
		This.fgl_call(169, m.toRot, m.toPos, m.toScale)
		
	ENDPROC

	PROCEDURE getvisuals
		LPARAMETERS tcVisualName, tcMaterialName
		RETURN This.fgl_call(132, m.tcVisualName, m.tcMaterialName)
		
	ENDPROC

	HIDDEN PROCEDURE hparent_access
		RETURN This.fgl_call(129)
	ENDPROC

	HIDDEN PROCEDURE hparent_assign
		LPARAMETERS vNewVal
		This.fgl_call(129, m.vNewVal)
	ENDPROC

	PROCEDURE Init
		DODEFAULT()
		
		This.NewObject("aChilds", "fgl.fglCollection")
		This.aChilds.fgl_member = 130
		
		This.NewObject("aVisuals", "fgl.fglCollection")
		This.aVisuals.fgl_member = 131
		
		This.NewObject("bbox", "fgl.fglBBox")
		
	ENDPROC

	HIDDEN PROCEDURE isenabled_access
		RETURN This.fgl_call(111)
		
	ENDPROC

	HIDDEN PROCEDURE isenabled_assign
		LPARAMETERS vNewVal
		This.fgl_call(111, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE isvisible_access
		RETURN This.fgl_call(112)
		
	ENDPROC

	HIDDEN PROCEDURE isvisible_assign
		LPARAMETERS vNewVal
		This.fgl_call(112, m.vNewVal)
		
	ENDPROC

	PROCEDURE lookat
		LPARAMETERS tnX, tnY, tnZ
		
		This.fgl_call(142, m.tnX, m.tnY, m.tnZ)
		
	ENDPROC

	PROCEDURE moveby
		LPARAMETERS tnX, tnY, tnZ
		
		This.fgl_call(137, m.tnX, m.tnY, m.tnZ)
		
	ENDPROC

	PROCEDURE movedir
		LPARAMETERS tnX, tnY, tnZ
		
		This.fgl_call(136, m.tnX, m.tnY, m.tnZ)
		
	ENDPROC

	PROCEDURE moveto
		LPARAMETERS tnX, tnY, tnZ
		
		This.fgl_call(138, m.tnX, m.tnY, m.tnZ)
		
	ENDPROC

	PROCEDURE rotateby
		LPARAMETERS tnX, tnY, tnZ, tnCx, tnCy, tnCz
		
		This.fgl_call(134, m.tnX, m.tnY, m.tnZ, m.tnCx, m.tnCy, m.tnCz)
		
	ENDPROC

	PROCEDURE rotateto
		LPARAMETERS tnX, tnY, tnZ, tnCx, tnCy, tnCz
		
		This.fgl_call(135, m.tnX, m.tnY, m.tnZ, m.tnCx, m.tnCy, m.tnCz)
		
	ENDPROC

	PROCEDURE scaleat
		LPARAMETERS tnX, tnY, tnZ
		This.fgl_call(140, m.tnX, m.tnY, m.tnZ)
		
	ENDPROC

	PROCEDURE scaleby
		LPARAMETERS tnX, tnY, tnZ
		This.fgl_call(139, m.tnX, m.tnY, m.tnZ)
		
	ENDPROC

	PROCEDURE scaleto
		LPARAMETERS tnX, tnY, tnZ
		This.fgl_call(141, m.tnX, m.tnY, m.tnZ)
		
	ENDPROC

	PROCEDURE setboundsext
		LPARAMETERS toBMinOrHObjectOrBMinX, toBMaxOrBMiny, tnBMinz, tnBMaxx, tnBMaxy, tnBMaxz
		This.fgl_call(110, m.toBMinOrHObjectOrBMinX, m.toBMaxOrBMiny, m.tnBMinz, m.tnBMaxx, m.tnBMaxy, m.tnBMaxz)
		
	ENDPROC

	PROCEDURE setrotquat
		LPARAMETERS tnA, tnX, tnY, tnZ
		This.fgl_call(185, m.tnA, m.tnX, m.tnY, m.tnZ)
		
	ENDPROC

	PROCEDURE settrgconstraints
		LPARAMETERS toRot, toPos, toScale
		This.fgl_call(170, m.toRot, m.toPos, m.toScale)
		
	ENDPROC

	PROCEDURE testinfrustum
		LPARAMETERS thViewport
		
		RETURN This.fgl_call(177, m.thViewport)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS fglpickinfo AS fglbind OF "fgl.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: getmove
		*m: hpickednode_access
		*m: hpickednode_assign
		*m: hpickedvisual_access
		*m: hpickedvisual_assign
		*m: hviewport_access
		*m: hviewport_assign
		*m: ispickdisabled_access
		*m: ispickdisabled_assign
		*m: ispicknearest_access
		*m: ispicknearest_assign
		*m: nmindist_access
		*m: nmindist_assign
		*m: npickradius_access
		*m: npickradius_assign
		*m: pick
		*p: hpickednode
		*p: hpickedvisual
		*p: hviewport
		*p: ispickdisabled
		*p: ispicknearest
		*p: nmindist
		*p: npickradius
	*</DefinedPropArrayMethod>

	HIDDEN _memberdata
	*<PropValue>
		fgl_class = ("pickinfo")
		hpickednode = 0
		hpickedvisual = 0
		hviewport = 0
		ispickdisabled = .F.
		ispicknearest = .F.
		Name = "fglpickinfo"
		nmindist = 0
		npickradius = 0
	*</PropValue>
	
	PROCEDURE getmove
		LPARAMETERS thNode, tnConstraint, tnXCoord1, tnYCoord1, tnXCoord2, tnYCoord2
		
		This.fgl_call(93, m.thNode, m.tnConstraint, m.tnXCoord1, m.tnYCoord1, m.tnXCoord2, m.tnYCoord2, This.oGetMove)
		
		RETURN This.oGetMove
		
	ENDPROC

	HIDDEN PROCEDURE hpickednode_access
		RETURN This.fgl_call(82)
		
	ENDPROC

	HIDDEN PROCEDURE hpickednode_assign
		LPARAMETERS vNewVal
		ERROR 1740
		
	ENDPROC

	HIDDEN PROCEDURE hpickedvisual_access
		RETURN This.fgl_call(81)
		
	ENDPROC

	HIDDEN PROCEDURE hpickedvisual_assign
		LPARAMETERS vNewVal
		ERROR 1740
		
	ENDPROC

	HIDDEN PROCEDURE hviewport_access
		RETURN This.fgl_call(80)
	ENDPROC

	HIDDEN PROCEDURE hviewport_assign
		LPARAMETERS vNewVal
		This.fgl_call(80, m.vNewVal)
		
	ENDPROC

	PROCEDURE Init
		DODEFAULT()
		
		This.NewObject("aPickedNodes", "fgl.fglCollection")
		This.aPickedNodes.fgl_member = 84
		
		This.NewObject("aPickedVisuals", "fgl.fglCollection")
		This.aPickedVisuals.fgl_member = 83
		
		This.NewObject("oGetMove", "fgl.fglVECTOR")
		This.NewObject("p", "fgl.fglVECTOR")
		This.NewObject("pg", "fgl.fglVECTOR")
		
	ENDPROC

	HIDDEN PROCEDURE ispickdisabled_access
		RETURN This.fgl_call(89)
		
	ENDPROC

	HIDDEN PROCEDURE ispickdisabled_assign
		LPARAMETERS vNewVal
		This.fgl_call(89, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE ispicknearest_access
		RETURN This.fgl_call(91)
		
	ENDPROC

	HIDDEN PROCEDURE ispicknearest_assign
		LPARAMETERS vNewVal
		This.fgl_call(91, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE nmindist_access
		RETURN This.fgl_call(12)
		
	ENDPROC

	HIDDEN PROCEDURE nmindist_assign
		LPARAMETERS vNewVal
		ERROR 1740
		
	ENDPROC

	HIDDEN PROCEDURE npickradius_access
		RETURN This.fgl_call(90)
		
	ENDPROC

	HIDDEN PROCEDURE npickradius_assign
		LPARAMETERS vNewVal
		This.fgl_call(90, m.vNewVal)
		
	ENDPROC

	PROCEDURE pick
		LPARAMETERS tnXCoord, tnYCoord, thStartNode, thViewport
		
		RETURN This.fgl_call(92, m.tnXCoord, m.tnYCoord, m.thStartNode, m.thViewport, This.p, This.pg)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS fglquat AS fglmath3d OF "fgl.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: build
		*m: conj
		*m: invert
		*m: len
		*m: mul
		*m: mulv
		*m: norm
		*m: normalize
		*m: toeuler
		*p: a
		*p: x
		*p: y
		*p: z
	*</DefinedPropArrayMethod>

	*<PropValue>
		a = 0
		Name = "fglquat"
		x = 0
		y = 0
		z = 0
	*</PropValue>
	
	PROCEDURE build
		LPARAMETERS tnP1, tnP2, tnP3, tnP4, tnP5, tnP6
		
		DO CASE
		 CASE PCOUNT()=4 &&build from angle and axis
		 	LOCAL lnSinA, lnCosA
		 	lnSinA = SIN(m.tnP1/2)
		 	lnCosA = COS(m.tnP1/2)
		 	This.a = lnCosA
		 	This.x = m.tnP2 * lnSinA
		 	This.y = m.tnP3 * lnSinA
		 	This.z = m.tnP4 * lnSinA
		 CASE PCOUNT()=3 &&build from Euler angles
		 	LOCAL lnSinA, lnCosA
		 	lnSinA = SIN(m.tnP1/2)
		 	lnCosA = COS(m.tnP1/2)
		 	This.a = lnCosA
		 	This.x = m.tnP2 * lnSinA
		 	This.y = m.tnP3 * lnSinA
		 	This.z = m.tnP4 * lnSinA
		
		 	 
		ENDCASE
		
	ENDPROC

	PROCEDURE conj
		LPARAMETERS toRes
		
		toRes.x = -This.x
		toRes.y = -This.y
		toRes.z = -This.z
		
	ENDPROC

	PROCEDURE invert
		LPARAMETERS toRes
		LOCAL lnNorm
		lnNorm = This.norm()
		
		toRes.a = This.a / lnNorm
		toRes.x = -This.x / lnNorm
		toRes.y = -This.y / lnNorm
		toRes.z = -This.z / lnNorm
		
	ENDPROC

	PROCEDURE len
		RETURN SQRT(This.a*This.a + This.x*This.x + This.y*This.y + This.z*This.z)
		
	ENDPROC

	PROCEDURE mul
		LPARAMETERS toOther, toRes
		
		LOCAL lnA, lnX, lnY, lnZ
		
		lnA = This.a * m.toOther.a - (This.x * m.toOther.x + This.y * m.toOther.y + This.z * m.toOther.z)
		
		lnX = (This.y * m.toOther.z - This.z * m.toOther.y) + m.toOther.x*This.a + This.x * m.toOther.a
		lnY = (This.z * m.toOther.x - This.x * m.toOther.z) + m.toOther.y*This.a + This.y * m.toOther.a
		lnZ = (This.x * m.toOther.y - This.y * m.toOther.x) + m.toOther.z*This.a + This.z * m.toOther.a
		
		m.toRes.a = lnA
		m.toRes.x = lnX
		m.toRes.y = lnY
		m.toRes.z = lnZ
		
	ENDPROC

	PROCEDURE mulv
		LPARAMETERS toVector, toRes
		
		LOCAL loQuat1, loQuat2
		loQuat1 = NEWOBJECT("fglQUAT")
		loQuat2 = NEWOBJECT("fglQUAT")
		
		loQuat1.a = 0.0
		loQuat1.x = toVector.x
		loQuat1.y = toVector.y
		loQuat1.z = toVector.z
		
		This.mul(loQuat1, loQuat1)
		This.invert(loQuat2)
		loQuat1.mul(loQuat2, loQuat2)
		
		toRes.x = loQuat2.x
		toRes.y = loQuat2.y
		toRes.z = loQuat2.z
		
	ENDPROC

	PROCEDURE norm
		RETURN This.a*This.a + This.x*This.x + This.y*This.y + This.z*This.z
		
	ENDPROC

	PROCEDURE normalize
		LOCAL lnLen
		lnLen = This.len()
		
		This.a = This.a / lnLen
		This.x = This.x / lnLen
		This.y = This.y / lnLen
		This.z = This.z / lnLen
		
	ENDPROC

	PROCEDURE toeuler
		LPARAMETERS toRes
		
		LOCAL lnTest
		lnTest = This.x*This.y + This.z*This.a
		IF lnTest > 0.499
			toRes.y = 2.0 * ATAN(This.x/This.a)
			toRes.z = PI()*0.5
			toRes.x = 0.0
			RETURN
		ENDIF
		IF lnTest < -0.499
			toRes.y = -2.0 * ATAN(This.x/This.a)
			toRes.z = -PI()*0.5
			toRes.x = 0.0
			RETURN
		ENDIF
		
		LOCAL lnSQX, lnSQY, lnSQZ
		lnSQX = This.x*This.x
		lnSQY = This.y*This.y
		lnSQZ = This.z*This.z
		
		toRes.y = ATAN( (2.0*This.y*This.a - 2.0*This.x*This.z) / (1.0 - 2.0*lnSQY - 2.0*lnSQZ) )
		toRes.z = ASIN( 2.0 * lnTest )
		toRes.x = ATAN( (2.0*This.x*This.a - 2.0*This.y*This.z) / (1.0 - 2.0*lnSQX - 2.0*lnSQZ) )
		
	ENDPROC

ENDDEFINE

DEFINE CLASS fglrow4 AS fglmath3d OF "fgl.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: a1
		*p: a2
		*p: a3
		*p: a4
	*</DefinedPropArrayMethod>

	*<PropValue>
		a1 = 0
		a2 = 0
		a3 = 0
		a4 = 0
		Name = "fglrow4"
	*</PropValue>

ENDDEFINE

DEFINE CLASS fglscene AS fglviewport OF "fgl.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: fontspath_access
		*m: fontspath_assign
		*m: getfps
		*m: getframetime
		*m: getidletime
		*m: gettime
		*m: issupported
		*m: loadgl
		*m: logclear
		*m: logfile_access
		*m: logfile_assign
		*m: msaamodeinfo_access
		*m: msaamode_access
		*m: msaamode_assign
		*m: render		&& Occurs when Report Engine is ready to provide output for each layout object in a band.
		*m: renderlock_access
		*m: renderlock_assign
		*m: sleep
		*m: vsync_access
		*m: vsync_assign
		*p: fontspath
		*p: logfile
		*p: msaamode
		*p: msaamodeinfo
		*p: renderlock
		*p: vsync
	*</DefinedPropArrayMethod>

	HIDDEN _memberdata
	*<PropValue>
		fgl_class = ("scene")
		fontspath = 
		logfile = ("")
		msaamode = 0
		msaamodeinfo = ("")
		Name = "fglscene"
		Picture = ..\
		renderlock = .F.
		vsync = .F.
		_memberdata = <VFPData>

		</VFPData>
	*</PropValue>
	
	HIDDEN PROCEDURE fontspath_access
		RETURN This.fgl_call(58)
		
	ENDPROC

	HIDDEN PROCEDURE fontspath_assign
		LPARAMETERS vNewVal
		This.fgl_call(58, m.vNewVal)
		
	ENDPROC

	PROCEDURE getfps
		RETURN This.fgl_call(180)
	ENDPROC

	PROCEDURE getframetime
		RETURN This.fgl_call(181)
	ENDPROC

	PROCEDURE getidletime
		RETURN This.fgl_call(182)
	ENDPROC

	PROCEDURE gettime
		RETURN This.fgl_call(183)
	ENDPROC

	PROCEDURE Init
		DODEFAULT()
		This.NewObject("aViewports", "fgl.fglCollection")
		This.aViewports.fgl_member = 63
		
		
	ENDPROC

	PROCEDURE issupported
		LPARAMETERS tcName
		
		IF EMPTY(tcName)
			RETURN .F.
		ENDIF
		
		RETURN This.fgl_call(62, m.tcName)
		
	ENDPROC

	PROCEDURE loadgl
		LPARAMETERS tHWnd
		This.fgl_call(60, m.tHWnd)
		
	ENDPROC

	PROCEDURE logclear
		RETURN This.fgl_call(57)
		
	ENDPROC

	HIDDEN PROCEDURE logfile_access
		RETURN This.fgl_call(56)
		
	ENDPROC

	HIDDEN PROCEDURE logfile_assign
		LPARAMETERS vNewVal
		This.fgl_call(56, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE msaamodeinfo_access
		RETURN This.fgl_call(174)
		
	ENDPROC

	HIDDEN PROCEDURE msaamode_access
		RETURN This.fgl_call(173)
		
	ENDPROC

	HIDDEN PROCEDURE msaamode_assign
		LPARAMETERS vNewVal
		This.fgl_call(173, m.vNewVal)
		
	ENDPROC

	PROCEDURE render		&& Occurs when Report Engine is ready to provide output for each layout object in a band.
		This.fgl_call(175)
		
	ENDPROC

	HIDDEN PROCEDURE renderlock_access
		RETURN This.fgl_call(187)
		
	ENDPROC

	HIDDEN PROCEDURE renderlock_assign
		LPARAMETERS vNewVal
		This.fgl_call(187, m.vNewVal)
		
	ENDPROC

	PROCEDURE sleep
		LPARAMETERS tnMilliseconds
		This.fgl_call(176, m.tnMilliseconds)
		
	ENDPROC

	HIDDEN PROCEDURE vsync_access
		RETURN This.fgl_call(59)
		
	ENDPROC

	HIDDEN PROCEDURE vsync_assign
		LPARAMETERS vNewVal
		This.fgl_call(59, m.vNewVal)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS fglshader AS fglbind OF "fgl.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: build
		*m: iscompiled
	*</DefinedPropArrayMethod>

	HIDDEN _memberdata
	*<PropValue>
		fgl_class = ("shader")
		Name = "fglshader"
	*</PropValue>
	
	PROCEDURE build
		LPARAMETERS tnShaderType, tcPathOrData
		
		RETURN This.fgl_call(68, m.tnShaderType, m.tcPathOrData)
		
	ENDPROC

	PROCEDURE iscompiled
		RETURN This.fgl_call(69)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS fglshaderprog AS fglbind OF "fgl.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: attach		&& Attaches an existing DOM and SOM objects to the XMLAdapter.
		*m: build
		*m: detach
		*m: islinked
	*</DefinedPropArrayMethod>

	HIDDEN _memberdata
	*<PropValue>
		fgl_class = ("shaderprog")
		Name = "fglshaderprog"
	*</PropValue>
	
	PROCEDURE attach		&& Attaches an existing DOM and SOM objects to the XMLAdapter.
		LPARAMETERS thShader
		
		RETURN This.fgl_call(77, m.thShader)
		
	ENDPROC

	PROCEDURE build
		RETURN This.fgl_call(68)
		
	ENDPROC

	PROCEDURE detach
		LPARAMETERS thShader
		
		RETURN This.fgl_call(78, m.thShader)
		
	ENDPROC

	PROCEDURE islinked
		RETURN This.fgl_call(79)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS fgltext AS fglvisual OF "fgl.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: alignment_access
		*m: alignment_assign
		*m: depth_access
		*m: depth_assign
		*m: fontname_access
		*m: fontname_assign
		*m: fontsize_access
		*m: fontsize_assign
		*m: fonttype_access
		*m: fonttype_assign
		*m: linelength_access
		*m: linelength_assign
		*m: linespacing_access
		*m: linespacing_assign
		*m: outset_access
		*m: outset_assign
		*m: text_access
		*m: text_assign
		*p: alignment		&& Specifies the alignment of text associated with a control.
		*p: depth
		*p: fontname		&& Specifies the name of the font used to display text.
		*p: fontsize		&& Specifies the font size for text displayed with an object.
		*p: fonttype
		*p: linelength
		*p: linespacing
		*p: outset
		*p: text		&& Returns all of the text in a text-entry area of a control.
	*</DefinedPropArrayMethod>

	HIDDEN _memberdata
	*<PropValue>
		alignment = 0
		depth = 0
		fgl_class = ("text")
		fontname = ("")
		fontsize = 10
		fonttype = 1
		linelength = 100.0
		linespacing = 1.0
		Name = "fgltext"
		outset = 0
		text = ("")
	*</PropValue>
	
	HIDDEN PROCEDURE alignment_access
		RETURN This.fgl_call(35)
		
	ENDPROC

	HIDDEN PROCEDURE alignment_assign
		LPARAMETERS vNewVal
		This.fgl_call(35, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE depth_access
		RETURN This.fgl_call(39)
		
	ENDPROC

	HIDDEN PROCEDURE depth_assign
		LPARAMETERS vNewVal
		This.fgl_call(39, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE fontname_access
		RETURN This.fgl_call(34)
		
	ENDPROC

	HIDDEN PROCEDURE fontname_assign
		LPARAMETERS vNewVal
		This.fgl_call(34, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE fontsize_access
		RETURN This.fgl_call(33)
		
	ENDPROC

	HIDDEN PROCEDURE fontsize_assign
		LPARAMETERS vNewVal
		This.fgl_call(33, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE fonttype_access
		RETURN This.fgl_call(32)
		
	ENDPROC

	HIDDEN PROCEDURE fonttype_assign
		LPARAMETERS vNewVal
		This.fgl_call(32, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE linelength_access
		RETURN This.fgl_call(36)
		
	ENDPROC

	HIDDEN PROCEDURE linelength_assign
		LPARAMETERS vNewVal
		This.fgl_call(36, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE linespacing_access
		RETURN This.fgl_call(37)
		
	ENDPROC

	HIDDEN PROCEDURE linespacing_assign
		LPARAMETERS vNewVal
		This.fgl_call(37, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE outset_access
		RETURN This.fgl_call(38)
		
	ENDPROC

	HIDDEN PROCEDURE outset_assign
		LPARAMETERS vNewVal
		This.fgl_call(38, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE text_access
		RETURN This.fgl_call(40)
		
	ENDPROC

	HIDDEN PROCEDURE text_assign
		LPARAMETERS vNewVal
		This.fgl_call(40, m.vNewVal)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS fglvector AS fglmath3d OF "fgl.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: add		&& Adds a new member to a Collection.
		*m: len
		*m: mul
		*m: mulcross
		*m: muldot
		*m: norm
		*m: normalize
		*m: sub
		*p: x
		*p: y
		*p: z
	*</DefinedPropArrayMethod>

	*<PropValue>
		Name = "fglvector"
		x = 0
		y = 0
		z = 0
	*</PropValue>
	
	PROCEDURE add		&& Adds a new member to a Collection.
		LPARAMETERS toOther, toRes
		
		toRes.x = This.x + m.toOther.x
		toRes.y = This.y + m.toOther.y
		toRes.z = This.z + m.toOther.z
		
		
	ENDPROC

	PROCEDURE len
		RETURN SQRT(This.x*This.x + This.y*This.y + This.z*This.z)
		
	ENDPROC

	PROCEDURE mul
		LPARAMETERS toOther, toRes
		
		m.toRes.x = (This.x * m.toOther.x)
		m.toRes.y = (This.y * m.toOther.y)
		m.toRes.z = (This.z * m.toOther.z)
		
	ENDPROC

	PROCEDURE mulcross
		LPARAMETERS toOther, toRes
		
		LOCAL lnX, lnY, lnZ
		
		lnX = (This.y * m.toOther.z - This.z * m.toOther.y)
		lnY = (This.z * m.toOther.x - This.x * m.toOther.z)
		lnZ = (This.x * m.toOther.y - This.y * m.toOther.x)
		
		m.toRes.x = lnX
		m.toRes.y = lnY
		m.toRes.z = lnZ
		
	ENDPROC

	PROCEDURE muldot
		LPARAMETERS toOther
		
		RETURN This.x * m.toOther.x + This.y*m.toOther.y + This.z*m.toOther.z
		
	ENDPROC

	PROCEDURE norm
		RETURN This.x*This.x + This.y*This.y + This.z*This.z
		
	ENDPROC

	PROCEDURE normalize
		LOCAL lnLen
		lnLen = This.len()
		
		This.x = This.x / lnLen
		This.y = This.y / lnLen
		This.z = This.z / lnLen
		
	ENDPROC

	PROCEDURE sub
		LPARAMETERS toOther, toRes
		
		toRes.x = This.x - m.toOther.x
		toRes.y = This.y - m.toOther.y
		toRes.z = This.z - m.toOther.z
		
	ENDPROC

ENDDEFINE

DEFINE CLASS fglviewport AS fglbind OF "fgl.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: backcolor_access
		*m: backcolor_assign
		*m: hcam_access
		*m: hcam_assign
		*m: hmaterial_access
		*m: hmaterial_assign
		*m: hrendernode_access
		*m: hrendernode_assign
		*m: move		&& Moves an object.
		*m: nproj_access
		*m: nproj_assign
		*m: project
		*m: testpointinfrustum
		*m: unproject
		*p: backcolor		&& Specifies the background color used to display text and graphics in an object.
		*p: hcam
		*p: hmaterial
		*p: hrendernode
		*p: nproj
	*</DefinedPropArrayMethod>

	HIDDEN _memberdata
	*<PropValue>
		backcolor = 0
		fgl_class = ("viewport")
		hcam = 0
		hmaterial = 0
		hrendernode = 0
		Name = "fglviewport"
		nproj = 0
		Picture = ..\
	*</PropValue>
	
	HIDDEN PROCEDURE backcolor_access
		RETURN This.fgl_call(70)
		
	ENDPROC

	HIDDEN PROCEDURE backcolor_assign
		LPARAMETERS vNewVal
		This.fgl_call(70, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE hcam_access
		RETURN This.fgl_call(73)
	ENDPROC

	HIDDEN PROCEDURE hcam_assign
		LPARAMETERS vNewVal
		This.fgl_call(73, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE hmaterial_access
		RETURN This.fgl_call(74)
	ENDPROC

	HIDDEN PROCEDURE hmaterial_assign
		LPARAMETERS vNewVal
		This.fgl_call(74, m.vNewVal)
		
	ENDPROC

	HIDDEN PROCEDURE hrendernode_access
		RETURN This.fgl_call(75)
	ENDPROC

	HIDDEN PROCEDURE hrendernode_assign
		LPARAMETERS vNewVal
		This.fgl_call(75, m.vNewVal)
		
	ENDPROC

	PROCEDURE Init
		DODEFAULT()
		This.NewObject("aLights", "fgl.fglCollection")
		This.aLights.fgl_member = 76
		
	ENDPROC

	PROCEDURE move		&& Moves an object.
		LPARAMETERS tnLeft, tnTop, tnWidth, tnHeight
		
		This.fgl_call(64, m.tnLeft, m.tnTop, m.tnWidth, m.tnHeight)
		
	ENDPROC

	HIDDEN PROCEDURE nproj_access
		RETURN This.fgl_call(72)
		
	ENDPROC

	HIDDEN PROCEDURE nproj_assign
		LPARAMETERS vNewVal
		This.fgl_call(72, m.vNewVal)
		
	ENDPROC

	PROCEDURE project
		LPARAMETERS toWorldPointOrX, tnYorWindowPoint, tnZ, toWindowPoint
		RETURN This.fgl_call(178, m.toWorldPointOrX, m.tnYorWindowPoint, m.tnZ, m.toWindowPoint)
		
	ENDPROC

	PROCEDURE testpointinfrustum
		LPARAMETERS tnXOrPoint, tnY, tnZ
		
		RETURN This.fgl_call(188, m.tnXOrPoint, m.tnY, m.tnZ)
		
		
	ENDPROC

	PROCEDURE unproject
		LPARAMETERS toWindowPointOrX, tnYorWorldPoint, tnZ, toWorldPoint
		RETURN This.fgl_call(179, m.toWindowPointOrX, m.tnYorWorldPoint, m.tnZ, m.toWorldPoint)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS fglvisual AS fglbind OF "fgl.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: calcbounds
		*m: correctboundsext
		*m: getbounds
		*m: getboundsext
		*m: getviewrangedist
		*m: getviewrangerot
		*m: hmaterial_access
		*m: hmaterial_assign
		*m: nstretch_access
		*m: nstretch_assign
		*m: setboundsext
		*m: setviewrangedist
		*m: setviewrangerot
		*p: hmaterial
		*p: nstretch
	*</DefinedPropArrayMethod>

	HIDDEN _memberdata
	*<PropValue>
		fgl_class = ("visual")
		hmaterial = 0
		Name = "fglvisual"
		nstretch = 0
	*</PropValue>
	
	PROCEDURE calcbounds
		RETURN This.fgl_call(109)
		
	ENDPROC

	PROCEDURE correctboundsext
		LPARAMETERS  m.toBMinOrBMinX, toBMaxOrBMiny, tnBMinz, tnBMaxx, tnBMaxy, tnBMaxz
		This.fgl_call(172, m.toBMinOrBMinX, m.toBMaxOrBMiny, m.tnBMinz, m.tnBMaxx, m.tnBMaxy, m.tnBMaxz)
		
	ENDPROC

	PROCEDURE getbounds
		LPARAMETERS toBMin, toBMax, toSize
		This.fgl_call(167, m.toBMin, m.toBMax, m.toSize)
		
	ENDPROC

	PROCEDURE getboundsext
		LPARAMETERS toBMin, toBMax, toSize
		This.fgl_call(168, m.toBMin, m.toBMax, m.toSize)
		
	ENDPROC

	PROCEDURE getviewrangedist
		LPARAMETERS toMin, toMax
		This.fgl_call(143, m.toMin, m.toMax)
	ENDPROC

	PROCEDURE getviewrangerot
		LPARAMETERS toMin, toMax
		This.fgl_call(145, m.toMin, m.toMax)
	ENDPROC

	HIDDEN PROCEDURE hmaterial_access
		RETURN This.fgl_call(74)
		
	ENDPROC

	HIDDEN PROCEDURE hmaterial_assign
		LPARAMETERS vNewVal
		This.fgl_call(74, m.vNewVal)
		
	ENDPROC

	PROCEDURE Init
		DODEFAULT()
		
		This.NewObject("aLODs", "fgl.fglCollection")
		This.aLODs.fgl_member = 153
		
		This.NewObject("bbox", "fgl.fglBBox")
		
	ENDPROC

	HIDDEN PROCEDURE nstretch_access
		RETURN This.fgl_call(151)
	ENDPROC

	HIDDEN PROCEDURE nstretch_assign
		LPARAMETERS vNewVal
		This.fgl_call(151, m.vNewVal)
		
	ENDPROC

	PROCEDURE setboundsext
		LPARAMETERS toBMinOrHObjectOrBMinX, toBMaxOrBMiny, tnBMinz, tnBMaxx, tnBMaxy, tnBMaxz
		This.fgl_call(110, m.toBMinOrHObjectOrBMinX, m.toBMaxOrBMiny, m.tnBMinz, m.tnBMaxx, m.tnBMaxy, m.tnBMaxz)
		
	ENDPROC

	PROCEDURE setviewrangedist
		LPARAMETERS toMinORnMinX, toMaxORnMiny, tnMinZ, tnMaxX, tnMaxY, tnMaxZ
		This.fgl_call(144, toMinORnMinX, toMaxORnMiny, tnMinZ, tnMaxX, tnMaxY, tnMaxZ)
	ENDPROC

	PROCEDURE setviewrangerot
		LPARAMETERS toMinORnMinX, toMaxORnMiny, tnMinZ, tnMaxX, tnMaxY, tnMaxZ
		This.fgl_call(146, toMinORnMinX, toMaxORnMiny, tnMinZ, tnMaxX, tnMaxY, tnMaxZ)
	ENDPROC

ENDDEFINE
